{"version":3,"sources":["algorithmDescriptions.js","generateBars.js","app.js","index.js"],"names":["AlgorithmDescriptions","props","description","method","dict","state","selectionSort","insertionSort","bubbleSort","mergeSort","quickSort","className","time","space","swaps","pros","map","arr","index","key","cons","logic","example","this","sortingMethod","Component","GenerateBars","style","display","comparisons","marginLeft","array","vertical","backgroundColor","indexSelected","indexCompleted","width","height","marginRight","App","stateDefaults","setState","arraySize","changeSort","a","sortInProgress","document","getElementById","value","sleep","changeSize","size","newArray","changeSpeed","speed","skip","randomArray","console","log","forceUpdate","sort","onclick","min","minIndex","i","length","k","swapped","merge","l","r","j","len","mid","Math","floor","slice","partition","start","end","pivot","pIndex","sortClicked","push","random","ms","Promise","resolve","setTimeout","htmlFor","id","onChange","defaultValue","onClick","shouldUpdate","ReactDOM","render"],"mappings":"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","file":"static/js/main.92727552.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass AlgorithmDescriptions extends Component {\n  constructor(props) {\n    super(props);\n    const selection = {\n      time: [\"n\", \"n²\", \"n\"],\n      swaps: [\"1\", \"n\", \"n\"],\n      space: [\"1\", \"1\", \"1\"],\n      pros: [\n        \"Works well with small arrays\",\n        \"No additional memory used, sorting is done in-place\",\n      ],\n      cons: [\n        \"n² average results in poor performance for large arrays\",\n        \"Has no potential to terminate early even with an already sorted array\",\n      ],\n      logic:\n        \"Selection Sort views the given list in two sublists; the sorted and unsorted sublists. \" +\n        \"Initially the sorted sublist is empty and the unsorted sublist is just the given list. \" +\n        \"The unsorted list is fully traversed and the smallest element is kept track of, once \" +\n        \"the end of the array is reached the smallest element found is then swapped with the left most \" +\n        \"element of the unsorted sublist. This left most element now becomes part of the \" +\n        \"sorted sublist as the boundary between the sublists move one to the right. \" +\n        \"This process is repeated until the boundary reachs the end of the given array. \",\n      example:\n        \"Think of organizing cards in your hand, we often intuitively sort by \" +\n        \"some process similar to selection sort. Keeping track of a sorted pile and \" +\n        \"unsorted pile we look for the next biggest card.\",\n    };\n    const insertion = {\n      time: [\"n\", \"n²\", \"n²\"],\n      swaps: [\"1\", \"n²\", \"n²\"],\n      space: [\"1\", \"1\", \"1\"],\n      pros: [\n        \"No additional memory used, sorting is done in-place\",\n        \"n runtime for nearly sorted arrays\",\n        \"simple, intuitive, and easy to code\",\n      ],\n      cons: [\"n² average results in poor performance for large arrays\"],\n      logic:\n        \"Like Selection Sort the given array is viewed as a sorted sublist and unsorted sublist. \" +\n        \"The sorted sublist occupies the leftmost space and is built up as we traverse the given array. \" +\n        \"The given array is traversed once but every item is then sorted in the sorted sublist. \" +\n        \"The selected element goes through the sorted sublist from right till left. \" +\n        \"As it searches for where it belongs it swaps places with the elements that are greater \" +\n        \"than itself until it finds the element that is less than or equal to it. \" +\n        \"Then it stops searching and the next element of the given array repeats this.\",\n      example:\n        \"Similar to Selection Sort we often intuitively use some form of Insertion Sort \" +\n        \"when sorting a deck of cards. Keeping track of a sorted and unsorted pile we \" +\n        \"insert the next card in the unsorted pile into the right spot in the sorted one.\",\n    };\n    const bubble = {\n      time: [\"n\", \"n²\", \"n²\"],\n      swaps: [\"1\", \"n²\", \"n²\"],\n      space: [\"1\", \"1\", \"1\"],\n      pros: [\n        \"No additional memory used, sorting is done in-place\",\n        \"Simple, intuitive, and easy to implement\",\n      ],\n      cons: [\n        \"n² average results in poor performance for large arrays\",\n        \"Good for academic lessons but few real life use cases\",\n      ],\n      logic:\n        \"This sorting method views the given array as a unsorted sublist and \" +\n        \"sorted sublist which builds up in-place at the far right. \" +\n        \"Bubble Sort traverses the array and compares the current element to \" +\n        \"the next element, swapping them if current > next. \" +\n        \"This 'bubbles' up the largest element in the unsorted sublist to the \" +\n        \"end of it. This element then becomes part of the sorted sublist as the \" +\n        \"boundary between sublists is moved one to the left. \" +\n        \"This repeats until there are no swaps done after traversing the \" +\n        \"unsorted sublist since this tells us that the array is empty or already \" +\n        \"sorted\",\n      example:\n        \"Think of class photos in elementary school, \" +\n        \"teachers would often sort us in height. It's common for some form \" +\n        \"of bubble sort to be intuitively used. Taller kids would make their way \" +\n        \"to the front of the line in a similar manner to elements 'bubbling' \" +\n        \"up to the top of the array.\",\n    };\n    const merge = {\n      time: [\"nlog(n)\", \"nlog(n)\", \"nlog(n)\"],\n      swaps: [\"X\", \"X\", \"X\"],\n      space: [\"n\", \"n\", \"n\"],\n      pros: [\n        \"Very Efficient\",\n        \"Worst case of nlog(n)\",\n        \"Stable sorting algorithm\",\n      ],\n      cons: [\n        \"Uses additional memory to store sub elements\",\n        \"Slower than quick sort in practice\",\n      ],\n      logic:\n        \"We divide the array in two and sort them seperately then merge \" +\n        \"the sorted sublists by comparing and taking the smallest element \" +\n        \"of the two sublists until they've both become merged to one. \" +\n        \"Now how are these sublists sorted? By recursion! These sublists \" +\n        \"are divided and merged together aswell. The sublists are divided \" +\n        \"until there are a bunch of sublists 1 element long. One element \" +\n        \"arrays are already sorted thus the dividing stops here and \" +\n        \"merging commences.\",\n      example:\n        \"Think of organizing a stack of 250 exams by grade. You'd \" +\n        \"likely seperate the initial pile into multiple piles and sort them all. \" +\n        \"Then you'd merge all the sorted sub piles into one sorted pile.\",\n    };\n    const quick = {\n      time: [\"nlog(n)\", \"n²\", \"nlog(n)\"],\n      swaps: [\"X\", \"X\", \"X\"],\n      space: [\"n\", \"n\", \"n\"],\n      pros: [\n        \"Used by bult in librays of popular languages to sort\",\n        \"No additional memory used, sorting is done in-place\",\n        \"Traverses large arrays quickly\",\n      ],\n      cons: [\n        \"Certain cases where it is inefficient such as already sorted arrays\",\n        \"It is not stable; swaps non-adjacent elements\",\n      ],\n      logic:\n        \"Quicksort is a recursive and very popular sorting method. \" +\n        \"It utilizes a divide and conquer method. \" +\n        \"Given an array a 'pivot' is selected. This pivot is best selected at \" +\n        \"random but that is not a necessary condition. The array is then \" +\n        \"partitioned so that all elements less than the pivot element are \" +\n        \"on the left of it and elements greater or equal to the pivot \" +\n        \"are on the right. Now the same thing is done to the left and right \" +\n        \"partitions recursively. By keeping track of relevant indexes it knows \" +\n        \"what to go over again.\",\n      example:\n        \"Most built in sort functions in programming languages \" +\n        \"use quicksort. They may also use a combination of other sorts \" +\n        \"depending on the input.\",\n    };\n    this.state = {\n      selectionSort: selection,\n      insertionSort: insertion,\n      bubbleSort: bubble,\n      mergeSort: merge,\n      quickSort: quick,\n    };\n  }\n\n  description = (method) => {\n    var dict;\n    if (method === \"Selection Sort\") {\n      dict = this.state.selectionSort;\n    } else if (method === \"Insertion Sort\") {\n      dict = this.state.insertionSort;\n    } else if (method === \"Bubble Sort\") {\n      dict = this.state.bubbleSort;\n    } else if (method === \"Merge Sort\") {\n      dict = this.state.mergeSort;\n    } else {\n      dict = this.state.quickSort;\n    }\n\n    return (\n      <>\n        <div className=\"algorithmDescriptions\">\n          <div className=\"table\">\n            <h1>{method}</h1>\n            <h3>Performance Complexities</h3>\n            <table>\n              <tbody>\n                <tr>\n                  <th></th>\n                  <th>Best Case</th>\n                  <th>Worst Case</th>\n                  <th>Average Case</th>\n                </tr>\n                <tr>\n                  <td>Time</td>\n                  <td>{dict.time[0]}</td>\n                  <td>{dict.time[1]}</td>\n                  <td>{dict.time[2]}</td>\n                </tr>\n                <tr>\n                  <td>Space</td>\n                  <td>{dict.space[0]}</td>\n                  <td>{dict.space[1]}</td>\n                  <td>{dict.space[2]}</td>\n                </tr>\n                <tr>\n                  <td>Swaps</td>\n                  <td>{dict.swaps[0]}</td>\n                  <td>{dict.swaps[1]}</td>\n                  <td>{dict.swaps[2]}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <div className=\"pros\">\n            <h3>Pros</h3>\n            <ul>\n              {dict.pros.map((arr, index) => {\n                return <li key={index}>{arr}</li>;\n              })}\n            </ul>\n          </div>\n          <div className=\"cons\">\n            <h3>Cons</h3>\n            <ul>\n              {dict.cons.map((arr, index) => {\n                return <li key={index}>{arr}</li>;\n              })}\n            </ul>\n          </div>\n\n          <div className=\"paragraphs\">\n            <h3>Logic</h3>\n            <p>{dict.logic}</p>\n\n            <h3>Real-life Example</h3>\n            <p>{dict.example}</p>\n          </div>\n        </div>\n      </>\n    );\n  };\n\n  render() {\n    return <>{this.description(this.props.sortingMethod)}</>;\n  }\n}\n\nexport default AlgorithmDescriptions;\n","import React, { Component } from \"react\";\n\nclass GenerateBars extends Component {\n  render() {\n    return (\n      <>\n        <div className=\"animation\">\n          <div className=\"data\">\n            <h3>Swaps = {this.props.swaps}</h3>\n            <h3 style={{ display: \"inline\" }}>\n              Comparisons = {this.props.comparisons}\n            </h3>\n            {this.props.sortingMethod === \"Merge Sort\" ||\n            this.props.sortingMethod === \"Quick Sort\" ? (\n              <h3 style={{ display: \"inline\", marginLeft: \"2em\" }}>\n                **Animation Incomplete**\n              </h3>\n            ) : null}\n          </div>\n          <div className=\"bars\">\n            <div className=\"alignBottom\">\n              {this.props.array.map((vertical, index) => (\n                <div\n                  key={index}\n                  style={{\n                    backgroundColor:\n                      index === this.props.indexSelected\n                        ? \"#ef4c4c\"\n                        : this.props.sortingMethod === \"Bubble Sort\"\n                        ? index >= this.props.indexCompleted\n                          ? \"#62e562\"\n                          : \"white\"\n                        : index < this.props.indexCompleted\n                        ? \"#62e562\"\n                        : \"white\",\n                    width: this.props.width,\n                    height: vertical * 6,\n                    display: \"inline-block\",\n                    marginRight: \"2px\",\n                  }}\n                ></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default GenerateBars;\n","import React, { Component } from \"react\";\nimport AlgorithmDescriptions from \"./algorithmDescriptions.js\";\nimport GenerateBars from \"./generateBars.js\";\nimport \"./css/styles.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      arraySize: 30,\n      speed: 0,\n      width: \"10px\",\n      sortingMethod: \"Selection Sort\",\n      indexSelected: 0,\n      indexCompleted: 0,\n      swaps: 0,\n      comparisons: 0,\n      sortInProgress: false,\n      skip: false,\n      array: this.randomArray(30),\n      sortClicked: false,\n    };\n  }\n  randomArray(size) {\n    var arr = [];\n    for (var i = 1; i <= size; i++) {\n      arr.push(Math.floor(Math.random() * 100 + 1));\n    }\n\n    return arr;\n  }\n\n  stateDefaults = () => {\n    this.setState({ indexSelected: 0 });\n    this.state.sortingMethod === \"Bubble Sort\"\n      ? this.setState({ indexCompleted: this.state.arraySize })\n      : this.setState({ indexCompleted: 0 });\n    this.setState({ swaps: 0 });\n    this.setState({ comparisons: 0 });\n  };\n\n  changeSort = async () => {\n    if (!this.state.sortInProgress) {\n      this.setState({\n        sortingMethod: document.getElementById(\"sortingMethod\").value,\n      });\n      await this.sleep(20);\n      this.state.sortingMethod === \"Bubble Sort\"\n        ? this.setState({ indexCompleted: this.state.arraySize })\n        : this.setState({ indexCompleted: 0 });\n    } else {\n      await this.sleep(250);\n      this.changeSort();\n    }\n  };\n\n  changeSize = async () => {\n    if (!this.state.sortInProgress) {\n      var size = document.getElementById(\"size\").value;\n      this.setState({ arraySize: size });\n      if (size === \"50\") {\n        this.setState({ width: \"5px\" });\n      } else if (size === \"30\") {\n        this.setState({ width: \"10px\" });\n      } else {\n        this.setState({ width: \"30px\" });\n      }\n      await this.sleep(0);\n      this.newArray();\n    } else {\n      await this.sleep(1000);\n      this.changeSize();\n    }\n  };\n\n  changeSpeed = () => {\n    this.setState({ speed: document.getElementById(\"speed\").value });\n  };\n\n  skip = () => {\n    this.setState({ skip: true });\n  };\n\n  newArray = async () => {\n    this.setState({ array: this.randomArray(this.state.arraySize) });\n    this.stateDefaults();\n\n    console.log(this.state);\n    this.forceUpdate();\n  };\n\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  sort = async () => {\n    this.setState({ sortInProgress: true });\n    this.stateDefaults();\n    document.getElementById(\"skip\").onclick = this.skip;\n    await this.sleep();\n\n    var method = this.state.sortingMethod;\n    var arr = this.state.array;\n    if (method === \"Selection Sort\") {\n      this.selectionSort(arr);\n    } else if (method === \"Insertion Sort\") {\n      this.insertionSort(arr);\n    } else if (method === \"Bubble Sort\") {\n      this.bubbleSort(arr);\n    } else if (method === \"Merge Sort\") {\n      this.mergeSort(arr, 1);\n    } else {\n      this.quickSort(arr, 0, this.state.arraySize - 1);\n    }\n  };\n\n  selectionSort = async (arr) => {\n    var min = 2500;\n    var minIndex = 0;\n    for (var i = 0; i < arr.length; i++) {\n      minIndex = i;\n      min = arr[i];\n      for (var k = i + 1; k < arr.length; k++) {\n        if (arr[k] < min) {\n          min = arr[k];\n          minIndex = k;\n        }\n        this.setState({ comparisons: this.state.comparisons + 1 });\n        this.setState({ indexSelected: k });\n        if (!this.state.skip) {\n          await this.sleep(this.state.speed);\n        }\n      }\n\n      if (arr[i] !== arr[minIndex]) {\n        this.setState({ swaps: this.state.swaps + 1 });\n      }\n      [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n      this.setState({ indexCompleted: this.state.indexCompleted + 1 });\n      this.setState({ array: arr });\n    }\n    this.setState({ indexSelected: this.state.indexSelected + 1 });\n    this.setState({ sortInProgress: false });\n    this.setState({ skip: false });\n    document.getElementById(\"skip\").onclick = null;\n    console.log(this.state);\n  };\n\n  insertionSort = async (arr) => {\n    document.getElementById(\"skip\").onclick = this.skip;\n\n    for (var i = 1; i < this.state.arraySize; i++) {\n      this.setState({ indexSelected: i });\n      for (var k = i; k >= 0; k--) {\n        this.setState({ comparisons: this.state.comparisons + 1 });\n        if (arr[k] < arr[k - 1]) {\n          [arr[k], arr[k - 1]] = [arr[k - 1], arr[k]];\n          this.setState({ array: arr });\n          this.setState({ indexSelected: k });\n          this.setState({ swaps: this.state.swaps + 1 });\n        } else {\n          break;\n        }\n        if (!this.state.skip) {\n          await this.sleep(this.state.speed);\n          this.forceUpdate();\n        }\n      }\n      this.setState({ indexCompleted: i + 2 });\n    }\n    this.setState({ indexSelected: i });\n    this.setState({ sortInProgress: false });\n    this.setState({ skip: false });\n    document.getElementById(\"skip\").onclick = null;\n    console.log(this.state);\n  };\n\n  bubbleSort = async (arr) => {\n    var index = this.state.arraySize;\n    var swapped = true;\n    this.setState({ indexCompleted: index });\n    while (swapped) {\n      swapped = false;\n      this.setState({ indexCompleted: index });\n      for (var i = 0; i < index - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n          [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n          this.setState({ swaps: this.state.swaps + 1 });\n          swapped = true;\n        }\n        this.setState({ comparisons: this.state.comparisons + 1 });\n        if (!this.state.skip) {\n          await this.sleep(this.state.speed);\n          this.setState({ indexSelected: i });\n        }\n      }\n      index -= 1;\n    }\n    this.setState({ array: arr });\n    this.setState({ indexSelected: -1 });\n    this.setState({ indexCompleted: 0 });\n    this.setState({ sortInProgress: false });\n    this.setState({ skip: false });\n    document.getElementById(\"skip\").onclick = null;\n    console.log(this.state);\n  };\n\n  merge = async (l, r, arr) => {\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    while (i < l.length || j < r.length) {\n      if (i >= l.length) {\n        arr[k] = r[j];\n        j += 1;\n      } else if (j >= r.length) {\n        arr[k] = l[i];\n        i += 1;\n      } else if (l[i] <= r[j]) {\n        arr[k] = l[i];\n        i += 1;\n      } else {\n        arr[k] = r[j];\n        j += 1;\n      }\n\n      this.setState({ comparisons: this.state.comparisons + 1 });\n      await this.sleep(this.state.speed);\n      k += 1;\n    }\n  };\n\n  mergeSort = async (arr) => {\n    var len = arr.length;\n    var mid = Math.floor(len / 2);\n    if (len < 2) {\n      return;\n    }\n\n    var l = arr.slice(0, mid);\n    var r = arr.slice(mid, len);\n\n    this.mergeSort(l);\n    this.mergeSort(r);\n    this.merge(l, r, arr);\n    this.setState({ array: arr });\n\n    document.getElementById(\"skip\").onclick = null;\n    this.setState({ sortInProgress: false });\n    this.setState({ skip: false });\n  };\n\n  partition = (arr, start, end) => {\n    var pivot = arr[end];\n    var index = start;\n    for (var i = start; i < end; i++) {\n      if (arr[i] <= pivot) {\n        [arr[i], arr[index]] = [arr[index], arr[i]];\n        index += 1;\n      }\n      this.setState({ comparisons: this.state.comparisons + 1 });\n      this.setState({ swaps: this.state.swaps + 1 });\n    }\n    [arr[index], arr[end]] = [arr[end], arr[index]];\n    this.setState({ swaps: this.state.swaps + 1 });\n    this.setState({ array: arr });\n    this.setState({ indexSelected: index });\n    return index;\n  };\n\n  quickSort = async (arr, start, end) => {\n    if (start < end) {\n      var pIndex = this.partition(arr, start, end);\n      await this.sleep(this.state.speed * 20 + 200);\n      this.quickSort(arr, start, pIndex - 1);\n      this.quickSort(arr, pIndex + 1, end);\n      this.setState({ array: arr });\n      console.log(this.state);\n    }\n    this.setState({ sortInProgress: false });\n  };\n  render() {\n    return (\n      <>\n        <div className=\"featureBar\">\n          <div className=\"title\">\n            <h1>Sorting Visualizer</h1>\n          </div>\n          <div className=\"features\">\n            <div>\n              <label htmlFor=\"sortingMethod\">Sorting Method</label>\n              <select\n                className=\"feature\"\n                id=\"sortingMethod\"\n                onChange={this.changeSort}\n              >\n                <option value=\"Selection Sort\">Selection Sort</option>\n                <option value=\"Insertion Sort\">Insertion Sort</option>\n                <option value=\"Bubble Sort\">Bubble Sort</option>\n                <option value=\"Merge Sort\">Merge Sort</option>\n                <option value=\"Quick Sort\">Quick Sort</option>\n              </select>\n            </div>\n            <div>\n              <label htmlFor=\"size\">Size</label>\n              <select\n                className=\"feature\"\n                id=\"size\"\n                defaultValue=\"30\"\n                onChange={this.changeSize}\n              >\n                <option value=\"10\">10</option>\n                <option value=\"30\">30</option>\n                <option value=\"50\">50</option>\n              </select>\n            </div>\n            <div>\n              <label htmlFor=\"speed\">Speed</label>\n              <select\n                className=\"feature\"\n                id=\"speed\"\n                onChange={this.changeSpeed}\n              >\n                <option value=\"0\">Fast</option>\n                <option value=\"10\">Moderate</option>\n                <option value=\"30\">Slow</option>\n              </select>\n            </div>\n            <div className=\"buttons\">\n              <button\n                className=\"feature\"\n                onClick={this.state.sortInProgress ? null : this.newArray}\n              >\n                New Array\n              </button>\n              <button className=\"feature\" id=\"skip\">\n                Skip\n              </button>\n              <button\n                className=\"feature\"\n                id=\"sort\"\n                onClick={this.state.sortInProgress ? null : this.sort}\n              >\n                Sort!\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <AlgorithmDescriptions\n          sortingMethod={this.state.sortingMethod}\n          shouldUpdate={this.state.sortClicked}\n        />\n\n        <GenerateBars\n          array={this.state.array}\n          indexSelected={this.state.indexSelected}\n          indexCompleted={this.state.indexCompleted}\n          swaps={this.state.swaps}\n          comparisons={this.state.comparisons}\n          width={this.state.width}\n          sortingMethod={this.state.sortingMethod}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}